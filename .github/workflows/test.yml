name: Tests and Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        
      - name: Run tests
        run: npm test
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.os }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30 
          
      # 添加构建步骤 (仅在测试成功且为推送事件时运行)
      - name: Build application
        if: success() && github.event_name == 'push'
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            npm run build:mac
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            npm run build:win
          fi
        shell: bash
      
      # 上传构建后的应用
      - name: Upload built application
        if: success() && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: chat-explorer-${{ matrix.os }}
          path: dist/
          retention-days: 7 
          
      # 读取 package.json 中的版本号
      - name: Get version
        if: success() && github.event_name == 'push'
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash
        
      # 自动发布到 GitHub Releases
      - name: Create Release
        if: success() && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.package_version.outputs.version }}
          tag_name: v${{ steps.package_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 